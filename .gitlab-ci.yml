# Exemple de pipeline Gitlab CI
#
# Trois étapes:
#
#   build: lance deux jobs en parallèle
#   package: une tâche également lancée en même tant que build mais n'ayant pas besoin de récupérer le dépôt GIT
#   test: Lancée après l'exécution de package et n'yant pas non plus besoin de récupérer le dépôt GIT
#
stages:
    - build
    - package
    - test


variables:
    ENV: "dev"

.printinfo: &printinfo
    - echo "Bonjour depuis ${ENV}, il est $(date)"
    - echo "Nous sommes dans l'étape '${CI_JOB_STAGE}' et dans le job '${CI_JOB_NAME}'"

before_script:
  - echo "Avant tous les autres jobs"
  - *printinfo
  
after_script:
  - echo "Après tous les autres jobs"
  - echo "Il est $(date)"

build:java:
  stage: build
  tags: [docker]
  image: openjdk:8
  before_script:
    - echo "Nous sommes à l'étape '${CI_JOB_STAGE}' et avant le '${CI_JOB_NAME}'"
  script:
    - *printinfo
    - echo "Répertoire courant $(pwd)"
    - ls -la
    - echo "Racine:"
    - ls -la /
    - echo "Variables d'environnements:"
    - printenv
    - echo "Run build java"
    - javac backend/src/main/java/Application.java
  only:
    changes:
      - backend/**/*.{java,xml}

build:js:
  stage: build
  tags: [docker]
  script:
    - *printinfo
    - echo "Run build js"
  only:
    changes:
      - frontend/**/*.js

package:gz:
  stage: package
  variables:
    GIT_STRATEGY: none
    ENV: "dev2"
  tags: [docker]
  script:
    - *printinfo
    - echo "mon simple fichier texte" | gzip > simplepackage.gz
  artifacts:
    paths:
      - simplepackage.gz
    expire_in: 1 hour

test:artifact:
  # Enable debug
  variables:
    GIT_STRATEGY: none
#    CI_DEBUG_TRACE: "true"
  stage: test
  tags: [docker]
  script:
    - *printinfo
    - ls -la
    - '[[ -f simplepackage.gz ]] && gzip -t simplepackage.gz && echo "Artifact is generated on ${ENV}"'
  dependencies:
    - package:gz
